name: Airlines
type: object
key: _id
data:
  inputs: '../input/airlines.csv'
  pre_run: |
    if (!inputs.airlines) {
      throw new Error('airlines must be provided as an input');
    }
    if (!globals.codes) {
      globals.codes = [];
    }
    this.data.count = inputs.airlines.length;
  post_build: |
    if (this.airline_iata) {
      globals.codes.push({
        id: this.airline_id,
        designation: 'airline',
        code_type: 'iata',
        code: this.airline_iata
      });
    }
    if (this.airline_icao && this.airline_icao !== this.airline_iata) {
      globals.codes.push({
        id: this.airline_id,
        designation: 'airline',
        code_type: 'icao',
        code: this.airline_icao
      });
    }
  dependencies:
    - countries.yaml
properties:
  _id:
    type: string
    description: The document id
    data:
      post_build: "`airline::${this.airline_id}`"
  _type:
    type: string
    description: The document type
    data:
      value: airline
  airline_id:
    type: integer
    description: The airlines id
    data:
      pre_build: "inputs.airlines[document_index].id"
  airline_name:
    type: string
    description: The name of the airline
    data:
      build: "inputs.airlines[document_index].name"
  airline_iata:
    type: string
    description: The airlines iata code if availabe, otherwise null
    data:
      build: "inputs.airlines[document_index].iata_code || null"
  airline_icao:
    type: string
    description: The airlines icao code if available, otherwise null
    data:
      build: "inputs.airlines[document_index].icao_code || null"
  callsign:
    type: string
    description: The airlines callsign if available
    data:
      build: "inputs.airlines[document_index].callsign || null"
  iso_country:
    type: string
    description: The ISO country code the airline is based in
    data:
      build: |
        var exists = false;
        for (var i = 0; i < documents.Countries.length; i++) {
          if (documents.Countries[i].country_code === inputs.airlines[document_index].iso_country) {
            exists = true;
            break;
          }
        }
        return exists ? inputs.airlines[document_index].iso_country : null;
  active:
    type: boolean
    description: Whether or not the airline is active
    data:
      pre_build: "inputs.airlines[document_index].active === 'Y'"
      post_build: "this.active && Boolean(this.iso_country) && Boolean(this.airline_icao) && Boolean(this.airline_iata)"
